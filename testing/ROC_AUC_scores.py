from encodings import normalize_encoding
from locale import normalize
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import os
import time

# per variable
auc_scores_hand = {
    "sigJetRecur_dr12": [0.7345],
    "sigJetRecur_z": [0.4912],
    "sigJetRecur_jetpt": [0.4954],
}# best is sigJetRecur_dr12

# per job per dimension TODO result for every trial for every hidden dim
auc_scores_lstm = {
    "22_08_09_1909": [[0.4608, 0.4606, 0.5236]],
    "22_08_09_1934": [[0.6078, 0.6223, 0.6018]],
    "22_08_09_1941": [[0.4816, 0.5774, 0.4019]],
    "22_08_11_1520": [[0.6820, 0.2809, 0.4418]],
    "10993304": [[0.3523,0.4577,0.5105]],
    "10993305": [[0.4364,0.3418,0.4589]],
    '11461549': [[0.7147680434973253, 0.5520276618934866, 0.4973879054384185], [0.5091304293356385, 0.4788564412873805, 0.5381140301424436], [0.47032109344658674, 0.5321356535247617, 0.5064130993097055], [0.5122298643214191, 0.4934703899976197, 0.5077611154959221], [0.4787725034765288, 0.5662870673131131, 0.4208942508863583], [0.7279988975332305, 0.5043033788100876, 0.49241803535410483], [0.5478357825634859, 0.5424499818343544, 0.5118151864797484], [0.4732501472043698, 0.5130717480362311, 0.4236591874318788], [0.6664574485411108, 0.4490986081357037, 0.5140458024830559], [0.5433181744152542, 0.522937572819183, 0.4823993685872139]], 
    '11461550': [[0.47396048658874235, 0.7378603375051679, 0.48379749689931223], [0.5305007454178725, 0.48680422445221183, 0.6856466343443455], [0.6028238182934316, 0.47921098457799327, 0.5027511557109031], [0.4347640345272547, 0.48330013404993677, 0.43824933288232426], [0.45059821350271234, 0.4916162413399982, 0.4567532353641272], [0.6983888951529047, 0.5061662970897383, 0.46826900189173276], [0.48864709788150984, 0.5011701181393368, 0.5647624058831635], [0.509899650467922, 0.5653512233622731, 0.5968542112977788], [0.557608273511983, 0.4871299532704426, 0.5201663722579272], [0.5036544267799201, 0.38651232131895114, 0.4546172059984215]]
} # best = 11461550 trial,dim 0,1 with last pooling,

# per job
auc_scores_lstm_ocsvm = {
    '22_07_18_1327': [0.29389671361502345], 
    '22_07_18_1334': [0.29325920434890046], 
    '22_07_18_1340': [0.3298888065233507], 
    '22_07_18_1345': [0.28823820113664445], 
    '22_07_18_1357': [0.31957499382258464], 
    '22_07_18_1404': [0.42499135161848284], 
    '22_07_18_1410': [0.3892760069187052], 
    '22_07_18_1414': [0.3968173956016802], 
    '22_07_18_1417': [0.39421299728193726], 
    '22_07_18_1432': [0.4506597479614529], 
    '22_07_18_1435': [0.4375982209043736], 
    '22_07_18_1440': [0.4157499382258463], 
    '22_07_18_1445': [0.429424264887571], 
    '22_07_18_1452': [0.4341586360266865], 
    '22_07_18_1502': [0.4204348900420064], 
    '22_07_18_1508': [0.5465678280207561], 
    '22_07_18_1514': [0.4053471707437608], 
    '22_07_18_1520': [0.6199456387447492], 
    '22_08_09_1909': [0.4948356807511737], 
    '22_08_09_1934': [0.345910551025451], 
    '22_08_09_1941': [0.551830985915493], 
    '22_08_11_1520': [0.4168668149246355],
    '10993304': [0.5371237954040029], 
    '10993305': [0.4154583642204102], 
    '11461549': [0.5294183234988287, 0.4641886220418186, 0.4717029353177735, 0.5017614412247403, 0.36088748574936413, 0.38059909046491525, 0.4864421643427168, 0.47447288307588226, 0.6490961025294095, 0.44672454617206], 
    '11461550': [0.26229563648663884, 0.49908921211210083, 0.5101477054910362, 0.5034452086543642, 0.5527267260495359, 0.5011525788952782, 0.49296049911677375, 0.6587514563836585, 0.39557008807206123, 0.5253166459954147],
    '11474168': [0.48963054835193753, 0.43926786184086897, 0.4957204244497062, 0.3943486050036958, 0.5135565828541361, 0.5180616629708974, 0.45542275842196916, 0.4189950013154433, 0.49570539081194176, 0.32556344821538197], 
    '11474169': [0.4287430626025732, 0.35502937823379815, 0.4701632402500595, 0.4631011889101865, 0.46872126382781476, 0.48031094574109573, 0.5062214204282081, 0.4503313664323925, 0.4643489808446399, 0.4217386402074642],
    '11478120': [0.5150060760952632, 0.40807055787324137, 0.4042983675974994, 0.5113992558349306, 0.4648613773317798, 0.5340975432530286, 0.49193821174878793, 0.5992520765212161, 0.5005537389909923, 0.5388456671803159], 
    '11478121': [0.5303153305521103, 0.7008732037934879, 0.4066498791044963, 0.34113328572681373, 0.5508024204156802, 0.37018704350985326, 0.4416669798674534, 0.4451435086004936, 0.3990603976397189, 0.43025519600105233]
} # best is 11478121 trial 1 with last reversed pooling, 11461550 trial 7 with last pooling, 11474168 trial 7 & 22_07_18_1520 with mean pooling

auc_scores_lstm_ocsvm_hypertraining = {
    '11120653': [0.46977612407762376, 0.6981809298304957, 0.7435875270918682, 0.5696508437629195, 0.40164743613835957, 0.4834830433094048, 0.4647461194422521, 0.4908645594517734, 0.3481777978226281, 0.47422482805276805, 0.5634356873504467, 0.7504904724320668, 0.2955763520877965, 0.49237544004710543, 0.5334611192543316, 0.5870748299319728, 0.4909735533255659, 0.6054271432329837, 0.512405256762005, 0.4885418624171584, 0.5355658285413613, 0.517203492815174, 0.5065609300810564, 0.5541198431490459, 0.5699051628017691, 0.4251349895390937, 0.5295461094198268, 0.49298304957342054, 0.5886984628105385, 0.5777088736046905, 0.48482354267673927, 0.5625311634782826, 0.4885318399919821, 0.6793763545934027, 0.565680710589945, 0.44208917452800645, 0.5194322296137608, 0.490221871437341, 0.38732163215193993, 0.503292366670425, 0.5713947457436013, 0.47550268726275036, 0.6004447451171997, 0.5198218513924907, 0.35432279725886673, 0.4932524022500344, 0.6528244446950051, 0.4686661404893449, 0.609271996091254, 0.4895779306197617, 0.4831974041918794, 0.5011112363914259, 0.5402124754137383, 0.7077786547399807, 0.5440235025870385, 0.5201563498327507, 0.495711654827677, 0.5483882687513311, 0.5294371155460342, 0.4074742235752496], 
    '11120654': [0.5405306874130867, 0.38046378772503475, 0.46849575926134723, 0.558374362636399, 0.615120081181644, 0.706549654852733, 0.6843449718745693, 0.4911664850102103, 0.4859084702020771, 0.3502486814246878, 0.5524172836722165, 0.470148206612295, 0.4911978050888864, 0.5306134977011062, 0.4043722829831748, 0.529338144097418, 0.5675185728066549, 0.44091780358552257, 0.45433908369977827, 0.680651708197091, 0.4323548940754939, 0.36878139837887275, 0.5696921862667719, 0.4550130917928866, 0.4514701644930532, 0.491518522694529, 0.4858558524699014, 0.4451372445847584, 0.6084438932110597, 0.5113052955989026, 0.47165157038874483, 0.5031633279462798, 0.5006451936207263, 0.44336828654113586, 0.48505781686523597, 0.47102266320893005, 0.6946492777589858, 0.45829167762869416, 0.48546623069117145, 0.6514488668395535, 0.6444494556570326, 0.5578331516768771, 0.6933426040766214, 0.5134300497362849, 0.378902795003821, 0.6584620588566918, 0.4416932887335413, 0.4914070232144424, 0.45803109457410957, 0.41756680572781596, 0.4661755678330264, 0.5082810288019444, 0.5565465228448653, 0.3836045652146679, 0.409297052154195, 0.46366119191691413, 0.5054697385399832, 0.4919582565991406, 0.3729782889214618, 0.5441149572167725], 
    '11120655': [0.48573934177722655, 0.39722879943874423, 0.48245825033512485, 0.4989000388368976, 0.32968642337229553, 0.5287555906340438, 0.6676476115308002, 0.6734167700229262, 0.3628543866902194, 0.5701431953997069, 0.5116548276769272, 0.4754638503651921, 0.546240964157302, 0.3270693175981258, 0.5107878878991744, 0.6681086430889115, 0.4955813633003846, 0.38146978865210907, 0.5232369927713258, 0.5508575437541499, 0.7267298079452775, 0.3244522118239561, 0.6983224965861115, 0.2749827739567282, 0.32730609739291666, 0.36472231618245826, 0.5473960486588743, 0.5323448716503176, 0.5465278560779745, 0.5424725322910011, 0.7193746006689968, 0.5547437391162726, 0.5956076721664725, 0.5442339735157415, 0.5077160145826286, 0.6489407549391764, 0.3842234499693063, 0.5011989326117188, 0.5116874005587502, 0.4222698287418098, 0.35194121847634086, 0.6301036068202603, 0.5215682589794666, 0.5799902281354531, 0.5190989839766478, 0.5505668934240362, 0.3860137056664286, 0.49655729695192996, 0.47085729319352054, 0.47744703774695885, 0.33414389696946917, 0.4593928915949437, 0.34507335162425923, 0.5403978902795004, 0.5218488868844038, 0.4000463537164405, 0.535312762305659, 0.3283810024930783, 0.46408213377432, 0.610289272246652],
    '11316965': [0.41953871788125935, 0.5233710427080593, 0.5394858495884542, 0.5686122699540221, 0.44457849438117786, 0.41014645268788913, 0.2876085240726125, 0.32105836809862065, 0.3410631287505794, 0.5599716866488769, 0.4356497663522131, 0.38524072612470406, 0.2547186830533318, 0.5193470389997621, 0.5008168276518711, 0.503713308527831, 0.5233459866451184, 0.7144197642224478, 0.4846707006928001, 0.6290512521767455, 0.43589155735959206, 0.48750328860826103, 0.5208178298943886, 0.46971974793600685, 0.4245749865323662, 0.4899437491386978, 0.5784317410205334, 0.5879718369852545, 0.5613560341263577, 0.5330351661843374, 0.5557071447363475, 0.6610077548514802, 0.432626752358402, 0.35055311258941885, 0.4077949411808922, 0.450677140100976, 0.7402437954924143, 0.3208842284611819, 0.5578895278184939, 0.4294809636561807, 0.6333759286403328, 0.558529710226632, 0.7364427907442903, 0.5084388819984715, 0.6593728467445911, 0.5432580398641962, 0.7180441237268387, 0.5499580310945741, 0.5266859598351311, 0.4294784580498866, 0.7363513361145564, 0.38293180992470655, 0.48612520514651536, 0.4070156976234324, 0.48788539356810867, 0.7043985918492626, 0.44388569424086394, 0.5604051565377532, 0.31743025018478843, 0.7034527254732463], 
    '11316966': [0.692544568471956, 0.5206812743513611, 0.4311709951015398, 0.5075280941105724, 0.27109407298831134, 0.703259793788602, 0.4183397852695406, 0.44258528457423485, 0.48983851367434633, 0.44801493341351273, 0.4896844188872603, 0.5151576652760552, 0.5450996604903472, 0.37892659826361486, 0.4875408727026722, 0.44566467470966287, 0.4980005261773217, 0.48848924468498267, 0.4950576915849213, 0.49146339935605915, 0.5690933463624861, 0.570931208579196, 0.6871675373648538, 0.374402726099648, 0.5058768995627717, 0.4743964620839128, 0.3695355858733917, 0.28367848060034323, 0.39870961275854727, 0.6929028701720099, 0.6385249495746733, 0.4937710627529096, 0.6773505719046367, 0.48232294759524436, 0.4220568522068127, 0.5065759637188209, 0.3001240275115571, 0.5050663359266359, 0.5209355933902107, 0.43913506470728253, 0.4660816075969983, 0.3218050387742574, 0.42874055699627917, 0.7188860074416507, 0.43912253667581214, 0.4126959070921187, 0.45577855451572896, 0.5432455118327257, 0.45458713872289247, 0.40945239974442815, 0.40407536863732596, 0.5207238696583606, 0.5276055173450597, 0.4790431089562897, 0.509386001177635, 0.4626376517457812, 0.46803598050638306, 0.4510855539269114, 0.5035792585910976, 0.4673394219566279], 
    '11316967': [0.5025093647035241, 0.44322296137607897, 0.5101978176169178, 0.4907204870898636, 0.49208980092958, 0.4115708898660754, 0.49282269077059926, 0.49445384046804725, 0.7102704801994463, 0.4550093333834454, 0.6303904987409328, 0.31808296062439706, 0.5858784029265482, 0.5136455318775761, 0.3903859886496035, 0.5291402012001855, 0.5227195850715978, 0.5484396336803599, 0.6941494093033161, 0.5409491236641987, 0.4715676325778931, 0.49954272685132983, 0.5232921161097958, 0.542015259142331, 0.5227446411345387, 0.4437829643828066, 0.5114142894726952, 0.5760714598915073, 0.5037371117876248, 0.5231994086769146, 0.5089851041705817, 0.6064243745380288, 0.4904223199408677, 0.43487803961363547, 0.48239310457147866, 0.5226444168827752, 0.4782901742649178, 0.6532002856391175, 0.5324526127209631, 0.5091091316821388, 0.5825284073113591, 0.36602147304594024, 0.6456621691033688, 0.5204595281943348, 0.462389596722667, 0.336703373798875, 0.5722942584031772, 0.4481314441061876, 0.3600017539244058, 0.5294696884278574, 0.49597599629170264, 0.7102303904987409, 0.6212462885706769, 0.48966687964320166, 0.4575374901341752, 0.54195637739442, 0.7395848210370706, 0.43537039125042276, 0.5094949950514276, 0.5301975670562885], 
} # best = 11120653 trial 2 with mean pooling


auc_scores_lstm_ocsvm_digits_01 = {'22_09_06_1613': [0.9892361111111111, 0.9918055555555556, 0.9877777777777778, 0.9727083333333333, 0.9630555555555554, 0.9824305555555556, 0.7838888888888889, 0.9756249999999999, 0.9944444444444445, 0.18576388888888887]}
auc_scores_lstm_ocsvm_digits_05 = {'22_09_05_1618': [0.8865972222222221, 0.04118055555555556, 0.9443750000000001, 0.6231944444444445, 0.6321527777777778, 0.7145833333333332, 0.20152777777777775, 0.04541666666666667, 0.9493750000000001, 0.4759027777777778], }
# best is 22_09_06_1613 trial 8

# For QG
dicts = [auc_scores_lstm_ocsvm_hypertraining, auc_scores_lstm_ocsvm, auc_scores_lstm, auc_scores_hand]
labels = ["LSTM + OCSVM - HyperTraining", "LSTM + OCSVM - RegularTraining", "Hand Cut LSTM Hidden State", "Hand Cut Variables"]

# for digits -> comment if want to use qg
# dicts = [auc_scores_lstm_ocsvm_digits_01, auc_scores_lstm_ocsvm_digits_05]
# labels = [r"$\nu = 0.1$", r"$\nu = 0.5$"]
a = pd.DataFrame({"label":l, "val":val} for l,d in zip(labels,dicts) for val in np.concatenate(list(d.values())).flatten())

# store for best job/trials
best_dict = {}

# set font size & kwargs
plt.rcParams.update({'font.size': 13.5})
kwargs = dict(histtype='stepfilled', density=True, linewidth=1, alpha=0.01,  bins=40, zorder=3, line_kws={'linewidth':1, 'alpha':0.1}, hist_kws={'alpha':0.1}) # normed=True,
# make plots and print best scores
print("Best AUC Scores:")
fig, ax = plt.subplots(figsize=[6.5 * 1.36, 6], dpi=160)
plt.grid(alpha=0.4,zorder=0)
kwargs = dict(ax=ax, kde=False, element="step",bins=60, alpha=0.4,linewidth=2,zorder=1)
for i, (d, l) in enumerate(zip(dicts,labels)):
    ax = sns.histplot(np.concatenate(list(d.values())).ravel(), color=sns.color_palette()[i] ,label=l, **kwargs)
    max_auc = 0
    job = 0
    trial = 0
    dim = -1
    for j, x in d.items():
        try:    
            max_auc, trial, job = (max(x), x.index(max(x)), j) if max(x) > max_auc else (max_auc, trial, job)
        except TypeError: # in case of hidden dimensions
            max_auc = max([y for z in x for y in z])
            for k, hidden in enumerate(x):
                if max_auc in hidden:
                    dim = hidden.index(max_auc)
                    trial = k
                    job = j
    print(f"For {l}:\nJob {job}{' - Trial '+str(trial) if len(x)>1 else ''}{' - Dimension '+str(dim) if dim>=0 else ''}\nAUC {max_auc}\n") 
    best_dict[l] = (job, trial) if dim < 0 else (job, (trial, dim))
plt.xlabel("Area Under Curve")
plt.legend(bbox_to_anchor=(1.17,0.95))
fig.subplots_adjust(right=0.85)

# store roc curve plots in designated directory
out_dir = f"output/ROC_curves_best"
try:
    os.mkdir(out_dir)
except FileExistsError:
    pass

out_file = out_dir + "/auc_scores_" + time.strftime("%y_%m_%d_%H%M")

# save plot without title
plt.savefig(out_file+"_no_title")

# save plot with title
plt.title("AUC Scores For Various Tests", y=1.04)
plt.savefig(out_file)

print("Best dict:\n",best_dict)

"""
plt.figure()
kwargs = dict(multiple="stack", kde=False, element="step",bins=60)
sns.histplot(pd.DataFrame(dict(zip(labels, dicts))).melt(), hue="variable", x="value")#,  **kwargs)
plt.show()
"""
